// Code generated by protoc-gen-go. DO NOT EDIT.
// source: testservice.proto

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SayHelloRequest struct {
	Values       *CommonValues `protobuf:"bytes,1,opt,name=values" json:"values,omitempty"`
	YourName     string        `protobuf:"bytes,2,opt,name=yourName" json:"yourName,omitempty"`
	Int64Value   int64         `protobuf:"varint,3,opt,name=int64Value" json:"int64Value,omitempty"`
	BoolValue    bool          `protobuf:"varint,4,opt,name=boolValue" json:"boolValue,omitempty"`
	Float64Value float64       `protobuf:"fixed64,5,opt,name=float64Value" json:"float64Value,omitempty"`
	Uint64Value  uint64        `protobuf:"varint,6,opt,name=uint64Value" json:"uint64Value,omitempty"`
}

func (m *SayHelloRequest) Reset()                    { *m = SayHelloRequest{} }
func (m *SayHelloRequest) String() string            { return proto1.CompactTextString(m) }
func (*SayHelloRequest) ProtoMessage()               {}
func (*SayHelloRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *SayHelloRequest) GetValues() *CommonValues {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *SayHelloRequest) GetYourName() string {
	if m != nil {
		return m.YourName
	}
	return ""
}

func (m *SayHelloRequest) GetInt64Value() int64 {
	if m != nil {
		return m.Int64Value
	}
	return 0
}

func (m *SayHelloRequest) GetBoolValue() bool {
	if m != nil {
		return m.BoolValue
	}
	return false
}

func (m *SayHelloRequest) GetFloat64Value() float64 {
	if m != nil {
		return m.Float64Value
	}
	return 0
}

func (m *SayHelloRequest) GetUint64Value() uint64 {
	if m != nil {
		return m.Uint64Value
	}
	return 0
}

type SayHelloResponse struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *SayHelloResponse) Reset()                    { *m = SayHelloResponse{} }
func (m *SayHelloResponse) String() string            { return proto1.CompactTextString(m) }
func (*SayHelloResponse) ProtoMessage()               {}
func (*SayHelloResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *SayHelloResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto1.RegisterType((*SayHelloRequest)(nil), "proto.SayHelloRequest")
	proto1.RegisterType((*SayHelloResponse)(nil), "proto.SayHelloResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TestService service

type TestServiceClient interface {
	SayHello(ctx context.Context, in *SayHelloRequest, opts ...grpc.CallOption) (*SayHelloResponse, error)
}

type testServiceClient struct {
	cc *grpc.ClientConn
}

func NewTestServiceClient(cc *grpc.ClientConn) TestServiceClient {
	return &testServiceClient{cc}
}

func (c *testServiceClient) SayHello(ctx context.Context, in *SayHelloRequest, opts ...grpc.CallOption) (*SayHelloResponse, error) {
	out := new(SayHelloResponse)
	err := grpc.Invoke(ctx, "/proto.TestService/sayHello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TestService service

type TestServiceServer interface {
	SayHello(context.Context, *SayHelloRequest) (*SayHelloResponse, error)
}

func RegisterTestServiceServer(s *grpc.Server, srv TestServiceServer) {
	s.RegisterService(&_TestService_serviceDesc, srv)
}

func _TestService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SayHelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TestService/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).SayHello(ctx, req.(*SayHelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TestService",
	HandlerType: (*TestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "sayHello",
			Handler:    _TestService_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "testservice.proto",
}

func init() { proto1.RegisterFile("testservice.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 259 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0x5d, 0xdb, 0xc6, 0x64, 0x52, 0x50, 0x47, 0xd0, 0x10, 0x44, 0x96, 0x9c, 0x16, 0x94,
	0x1e, 0xaa, 0x78, 0xf3, 0xe4, 0xc5, 0x83, 0x78, 0xd8, 0x8a, 0xf7, 0xad, 0x8e, 0x5a, 0x48, 0x32,
	0x35, 0xb3, 0x29, 0xf4, 0xcf, 0xfa, 0x5b, 0x84, 0x24, 0xb6, 0xd1, 0x9e, 0x86, 0xf9, 0xde, 0x3c,
	0x86, 0xf7, 0xe0, 0xd8, 0x93, 0x78, 0xa1, 0x6a, 0xb5, 0x78, 0xa5, 0xc9, 0xb2, 0x62, 0xcf, 0x38,
	0x6a, 0x46, 0x3a, 0x96, 0x4f, 0x57, 0xd1, 0x5b, 0x0b, 0xb3, 0x6f, 0x05, 0x87, 0x33, 0xb7, 0x7e,
	0xa0, 0x3c, 0x67, 0x4b, 0x5f, 0x35, 0x89, 0xc7, 0x4b, 0x08, 0x56, 0x2e, 0xaf, 0x49, 0x12, 0xa5,
	0x95, 0x89, 0xa7, 0x27, 0xed, 0xed, 0xe4, 0x9e, 0x8b, 0x82, 0xcb, 0x97, 0x46, 0xb2, 0xdd, 0x09,
	0xa6, 0x10, 0xae, 0xb9, 0xae, 0x9e, 0x5c, 0x41, 0xc9, 0xbe, 0x56, 0x26, 0xb2, 0x9b, 0x1d, 0x2f,
	0x00, 0x16, 0xa5, 0xbf, 0xbd, 0x69, 0x2c, 0xc9, 0x40, 0x2b, 0x33, 0xb0, 0x3d, 0x82, 0xe7, 0x10,
	0xcd, 0x99, 0xf3, 0x56, 0x1e, 0x6a, 0x65, 0x42, 0xbb, 0x05, 0x98, 0xc1, 0xf8, 0x3d, 0x67, 0xb7,
	0xf1, 0x8f, 0xb4, 0x32, 0xca, 0xfe, 0x61, 0xa8, 0x21, 0xae, 0x7b, 0x2f, 0x02, 0xad, 0xcc, 0xd0,
	0xf6, 0x51, 0x76, 0x05, 0x47, 0xdb, 0x7c, 0xb2, 0xe4, 0x52, 0x08, 0x13, 0x38, 0x28, 0x48, 0xc4,
	0x7d, 0x50, 0x93, 0x30, 0xb2, 0xbf, 0xeb, 0xf4, 0x11, 0xe2, 0x67, 0x12, 0x3f, 0x6b, 0x8b, 0xc3,
	0x3b, 0x08, 0xa5, 0x33, 0xe3, 0x69, 0xd7, 0xc2, 0xbf, 0xb6, 0xd2, 0xb3, 0x1d, 0xde, 0x7e, 0xc9,
	0xf6, 0xe6, 0x41, 0xa3, 0x5c, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x88, 0x16, 0x71, 0x3e, 0x8d,
	0x01, 0x00, 0x00,
}
