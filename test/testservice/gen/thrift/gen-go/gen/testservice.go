// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package gen

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - Message
type SayHelloResponse struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewSayHelloResponse() *SayHelloResponse {
  return &SayHelloResponse{}
}


func (p *SayHelloResponse) GetMessage() string {
  return p.Message
}
func (p *SayHelloResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SayHelloResponse)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *SayHelloResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SayHelloResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SayHelloResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *SayHelloResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SayHelloResponse(%+v)", *p)
}

// Attributes:
//  - StringValue
//  - Int32Value
//  - BoolValue
type TestJsonRequest struct {
  StringValue string `thrift:"stringValue,1" db:"stringValue" json:"stringValue"`
  Int32Value int32 `thrift:"int32Value,2" db:"int32Value" json:"int32Value"`
  BoolValue bool `thrift:"boolValue,3" db:"boolValue" json:"boolValue"`
}

func NewTestJsonRequest() *TestJsonRequest {
  return &TestJsonRequest{}
}


func (p *TestJsonRequest) GetStringValue() string {
  return p.StringValue
}

func (p *TestJsonRequest) GetInt32Value() int32 {
  return p.Int32Value
}

func (p *TestJsonRequest) GetBoolValue() bool {
  return p.BoolValue
}
func (p *TestJsonRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TestJsonRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.StringValue = v
}
  return nil
}

func (p *TestJsonRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Int32Value = v
}
  return nil
}

func (p *TestJsonRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.BoolValue = v
}
  return nil
}

func (p *TestJsonRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TestJsonRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TestJsonRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("stringValue", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:stringValue: ", p), err) }
  if err := oprot.WriteString(string(p.StringValue)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stringValue (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:stringValue: ", p), err) }
  return err
}

func (p *TestJsonRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("int32Value", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:int32Value: ", p), err) }
  if err := oprot.WriteI32(int32(p.Int32Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.int32Value (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:int32Value: ", p), err) }
  return err
}

func (p *TestJsonRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("boolValue", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:boolValue: ", p), err) }
  if err := oprot.WriteBool(bool(p.BoolValue)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.boolValue (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:boolValue: ", p), err) }
  return err
}

func (p *TestJsonRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TestJsonRequest(%+v)", *p)
}

// Attributes:
//  - Message
type TestJsonResponse struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewTestJsonResponse() *TestJsonResponse {
  return &TestJsonResponse{}
}


func (p *TestJsonResponse) GetMessage() string {
  return p.Message
}
func (p *TestJsonResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TestJsonResponse)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *TestJsonResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TestJsonResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TestJsonResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *TestJsonResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TestJsonResponse(%+v)", *p)
}

// Attributes:
//  - Message
type EatResponse struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewEatResponse() *EatResponse {
  return &EatResponse{}
}


func (p *EatResponse) GetMessage() string {
  return p.Message
}
func (p *EatResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EatResponse)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *EatResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("EatResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EatResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *EatResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EatResponse(%+v)", *p)
}

type TestService interface {
  // Parameters:
  //  - Values
  //  - YourName
  //  - Int64Value
  //  - BoolValue
  //  - Float64Value
  //  - Uint64Value
  //  - Int32Value
  //  - Int16Value
  //  - StringList
  //  - I32List
  //  - BoolList
  //  - DoubleList
  SayHello(ctx context.Context, values *CommonValues, yourName string, int64Value int64, boolValue bool, float64Value float64, uint64Value int64, int32Value int32, int16Value int16, stringList []string, i32List []int32, boolList []bool, doubleList []float64) (r *SayHelloResponse, err error)
  // Parameters:
  //  - Request
  TestJson(ctx context.Context, request *TestJsonRequest) (r *TestJsonResponse, err error)
}

type TestServiceClient struct {
  c thrift.TClient
}

// Deprecated: Use NewTestService instead
func NewTestServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TestServiceClient {
  return &TestServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewTestService instead
func NewTestServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TestServiceClient {
  return &TestServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTestServiceClient(c thrift.TClient) *TestServiceClient {
  return &TestServiceClient{
    c: c,
  }
}

// Parameters:
//  - Values
//  - YourName
//  - Int64Value
//  - BoolValue
//  - Float64Value
//  - Uint64Value
//  - Int32Value
//  - Int16Value
//  - StringList
//  - I32List
//  - BoolList
//  - DoubleList
func (p *TestServiceClient) SayHello(ctx context.Context, values *CommonValues, yourName string, int64Value int64, boolValue bool, float64Value float64, uint64Value int64, int32Value int32, int16Value int16, stringList []string, i32List []int32, boolList []bool, doubleList []float64) (r *SayHelloResponse, err error) {
  var _args0 TestServiceSayHelloArgs
  _args0.Values = values
  _args0.YourName = yourName
  _args0.Int64Value = int64Value
  _args0.BoolValue = boolValue
  _args0.Float64Value = float64Value
  _args0.Uint64Value = uint64Value
  _args0.Int32Value = int32Value
  _args0.Int16Value = int16Value
  _args0.StringList = stringList
  _args0.I32List = i32List
  _args0.BoolList = boolList
  _args0.DoubleList = doubleList
  var _result1 TestServiceSayHelloResult
  if err = p.c.Call(ctx, "sayHello", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TestServiceClient) TestJson(ctx context.Context, request *TestJsonRequest) (r *TestJsonResponse, err error) {
  var _args2 TestServiceTestJsonArgs
  _args2.Request = request
  var _result3 TestServiceTestJsonResult
  if err = p.c.Call(ctx, "testJson", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

type TestServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TestService
}

func (p *TestServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TestServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TestServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTestServiceProcessor(handler TestService) *TestServiceProcessor {

  self4 := &TestServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self4.processorMap["sayHello"] = &testServiceProcessorSayHello{handler:handler}
  self4.processorMap["testJson"] = &testServiceProcessorTestJson{handler:handler}
return self4
}

func (p *TestServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x5 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x5.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x5

}

type testServiceProcessorSayHello struct {
  handler TestService
}

func (p *testServiceProcessorSayHello) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TestServiceSayHelloArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("sayHello", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TestServiceSayHelloResult{}
var retval *SayHelloResponse
  var err2 error
  if retval, err2 = p.handler.SayHello(ctx, args.Values, args.YourName, args.Int64Value, args.BoolValue, args.Float64Value, args.Uint64Value, args.Int32Value, args.Int16Value, args.StringList, args.I32List, args.BoolList, args.DoubleList); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sayHello: " + err2.Error())
    oprot.WriteMessageBegin("sayHello", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("sayHello", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type testServiceProcessorTestJson struct {
  handler TestService
}

func (p *testServiceProcessorTestJson) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TestServiceTestJsonArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("testJson", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TestServiceTestJsonResult{}
var retval *TestJsonResponse
  var err2 error
  if retval, err2 = p.handler.TestJson(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing testJson: " + err2.Error())
    oprot.WriteMessageBegin("testJson", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("testJson", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Values
//  - YourName
//  - Int64Value
//  - BoolValue
//  - Float64Value
//  - Uint64Value
//  - Int32Value
//  - Int16Value
//  - StringList
//  - I32List
//  - BoolList
//  - DoubleList
type TestServiceSayHelloArgs struct {
  Values *CommonValues `thrift:"values,1" db:"values" json:"values"`
  YourName string `thrift:"yourName,2" db:"yourName" json:"yourName"`
  Int64Value int64 `thrift:"int64Value,3" db:"int64Value" json:"int64Value"`
  BoolValue bool `thrift:"boolValue,4" db:"boolValue" json:"boolValue"`
  Float64Value float64 `thrift:"float64Value,5" db:"float64Value" json:"float64Value"`
  Uint64Value int64 `thrift:"uint64Value,6" db:"uint64Value" json:"uint64Value"`
  Int32Value int32 `thrift:"int32Value,7" db:"int32Value" json:"int32Value"`
  Int16Value int16 `thrift:"int16Value,8" db:"int16Value" json:"int16Value"`
  StringList []string `thrift:"stringList,9" db:"stringList" json:"stringList"`
  I32List []int32 `thrift:"i32List,10" db:"i32List" json:"i32List"`
  BoolList []bool `thrift:"boolList,11" db:"boolList" json:"boolList"`
  DoubleList []float64 `thrift:"doubleList,12" db:"doubleList" json:"doubleList"`
}

func NewTestServiceSayHelloArgs() *TestServiceSayHelloArgs {
  return &TestServiceSayHelloArgs{}
}

var TestServiceSayHelloArgs_Values_DEFAULT *CommonValues
func (p *TestServiceSayHelloArgs) GetValues() *CommonValues {
  if !p.IsSetValues() {
    return TestServiceSayHelloArgs_Values_DEFAULT
  }
return p.Values
}

func (p *TestServiceSayHelloArgs) GetYourName() string {
  return p.YourName
}

func (p *TestServiceSayHelloArgs) GetInt64Value() int64 {
  return p.Int64Value
}

func (p *TestServiceSayHelloArgs) GetBoolValue() bool {
  return p.BoolValue
}

func (p *TestServiceSayHelloArgs) GetFloat64Value() float64 {
  return p.Float64Value
}

func (p *TestServiceSayHelloArgs) GetUint64Value() int64 {
  return p.Uint64Value
}

func (p *TestServiceSayHelloArgs) GetInt32Value() int32 {
  return p.Int32Value
}

func (p *TestServiceSayHelloArgs) GetInt16Value() int16 {
  return p.Int16Value
}

func (p *TestServiceSayHelloArgs) GetStringList() []string {
  return p.StringList
}

func (p *TestServiceSayHelloArgs) GetI32List() []int32 {
  return p.I32List
}

func (p *TestServiceSayHelloArgs) GetBoolList() []bool {
  return p.BoolList
}

func (p *TestServiceSayHelloArgs) GetDoubleList() []float64 {
  return p.DoubleList
}
func (p *TestServiceSayHelloArgs) IsSetValues() bool {
  return p.Values != nil
}

func (p *TestServiceSayHelloArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TestServiceSayHelloArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Values = &CommonValues{}
  if err := p.Values.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Values), err)
  }
  return nil
}

func (p *TestServiceSayHelloArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.YourName = v
}
  return nil
}

func (p *TestServiceSayHelloArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Int64Value = v
}
  return nil
}

func (p *TestServiceSayHelloArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.BoolValue = v
}
  return nil
}

func (p *TestServiceSayHelloArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Float64Value = v
}
  return nil
}

func (p *TestServiceSayHelloArgs)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Uint64Value = v
}
  return nil
}

func (p *TestServiceSayHelloArgs)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Int32Value = v
}
  return nil
}

func (p *TestServiceSayHelloArgs)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Int16Value = v
}
  return nil
}

func (p *TestServiceSayHelloArgs)  ReadField9(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.StringList =  tSlice
  for i := 0; i < size; i ++ {
var _elem6 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem6 = v
}
    p.StringList = append(p.StringList, _elem6)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TestServiceSayHelloArgs)  ReadField10(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.I32List =  tSlice
  for i := 0; i < size; i ++ {
var _elem7 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem7 = v
}
    p.I32List = append(p.I32List, _elem7)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TestServiceSayHelloArgs)  ReadField11(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]bool, 0, size)
  p.BoolList =  tSlice
  for i := 0; i < size; i ++ {
var _elem8 bool
    if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem8 = v
}
    p.BoolList = append(p.BoolList, _elem8)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TestServiceSayHelloArgs)  ReadField12(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]float64, 0, size)
  p.DoubleList =  tSlice
  for i := 0; i < size; i ++ {
var _elem9 float64
    if v, err := iprot.ReadDouble(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem9 = v
}
    p.DoubleList = append(p.DoubleList, _elem9)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TestServiceSayHelloArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sayHello_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TestServiceSayHelloArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("values", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:values: ", p), err) }
  if err := p.Values.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Values), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:values: ", p), err) }
  return err
}

func (p *TestServiceSayHelloArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("yourName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:yourName: ", p), err) }
  if err := oprot.WriteString(string(p.YourName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.yourName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:yourName: ", p), err) }
  return err
}

func (p *TestServiceSayHelloArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("int64Value", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:int64Value: ", p), err) }
  if err := oprot.WriteI64(int64(p.Int64Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.int64Value (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:int64Value: ", p), err) }
  return err
}

func (p *TestServiceSayHelloArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("boolValue", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:boolValue: ", p), err) }
  if err := oprot.WriteBool(bool(p.BoolValue)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.boolValue (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:boolValue: ", p), err) }
  return err
}

func (p *TestServiceSayHelloArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("float64Value", thrift.DOUBLE, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:float64Value: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Float64Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.float64Value (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:float64Value: ", p), err) }
  return err
}

func (p *TestServiceSayHelloArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uint64Value", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:uint64Value: ", p), err) }
  if err := oprot.WriteI64(int64(p.Uint64Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uint64Value (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:uint64Value: ", p), err) }
  return err
}

func (p *TestServiceSayHelloArgs) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("int32Value", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:int32Value: ", p), err) }
  if err := oprot.WriteI32(int32(p.Int32Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.int32Value (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:int32Value: ", p), err) }
  return err
}

func (p *TestServiceSayHelloArgs) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("int16Value", thrift.I16, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:int16Value: ", p), err) }
  if err := oprot.WriteI16(int16(p.Int16Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.int16Value (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:int16Value: ", p), err) }
  return err
}

func (p *TestServiceSayHelloArgs) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("stringList", thrift.LIST, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:stringList: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.StringList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.StringList {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:stringList: ", p), err) }
  return err
}

func (p *TestServiceSayHelloArgs) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("i32List", thrift.LIST, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:i32List: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.I32List)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.I32List {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:i32List: ", p), err) }
  return err
}

func (p *TestServiceSayHelloArgs) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("boolList", thrift.LIST, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:boolList: ", p), err) }
  if err := oprot.WriteListBegin(thrift.BOOL, len(p.BoolList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.BoolList {
    if err := oprot.WriteBool(bool(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:boolList: ", p), err) }
  return err
}

func (p *TestServiceSayHelloArgs) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("doubleList", thrift.LIST, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:doubleList: ", p), err) }
  if err := oprot.WriteListBegin(thrift.DOUBLE, len(p.DoubleList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.DoubleList {
    if err := oprot.WriteDouble(float64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:doubleList: ", p), err) }
  return err
}

func (p *TestServiceSayHelloArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TestServiceSayHelloArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TestServiceSayHelloResult struct {
  Success *SayHelloResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTestServiceSayHelloResult() *TestServiceSayHelloResult {
  return &TestServiceSayHelloResult{}
}

var TestServiceSayHelloResult_Success_DEFAULT *SayHelloResponse
func (p *TestServiceSayHelloResult) GetSuccess() *SayHelloResponse {
  if !p.IsSetSuccess() {
    return TestServiceSayHelloResult_Success_DEFAULT
  }
return p.Success
}
func (p *TestServiceSayHelloResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TestServiceSayHelloResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TestServiceSayHelloResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SayHelloResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TestServiceSayHelloResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sayHello_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TestServiceSayHelloResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TestServiceSayHelloResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TestServiceSayHelloResult(%+v)", *p)
}

// Attributes:
//  - Request
type TestServiceTestJsonArgs struct {
  Request *TestJsonRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTestServiceTestJsonArgs() *TestServiceTestJsonArgs {
  return &TestServiceTestJsonArgs{}
}

var TestServiceTestJsonArgs_Request_DEFAULT *TestJsonRequest
func (p *TestServiceTestJsonArgs) GetRequest() *TestJsonRequest {
  if !p.IsSetRequest() {
    return TestServiceTestJsonArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TestServiceTestJsonArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TestServiceTestJsonArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TestServiceTestJsonArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &TestJsonRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TestServiceTestJsonArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("testJson_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TestServiceTestJsonArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TestServiceTestJsonArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TestServiceTestJsonArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TestServiceTestJsonResult struct {
  Success *TestJsonResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTestServiceTestJsonResult() *TestServiceTestJsonResult {
  return &TestServiceTestJsonResult{}
}

var TestServiceTestJsonResult_Success_DEFAULT *TestJsonResponse
func (p *TestServiceTestJsonResult) GetSuccess() *TestJsonResponse {
  if !p.IsSetSuccess() {
    return TestServiceTestJsonResult_Success_DEFAULT
  }
return p.Success
}
func (p *TestServiceTestJsonResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TestServiceTestJsonResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TestServiceTestJsonResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TestJsonResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TestServiceTestJsonResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("testJson_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TestServiceTestJsonResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TestServiceTestJsonResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TestServiceTestJsonResult(%+v)", *p)
}


type MinionsService interface {
  // Parameters:
  //  - Food
  Eat(ctx context.Context, food string) (r *EatResponse, err error)
}

type MinionsServiceClient struct {
  c thrift.TClient
}

// Deprecated: Use NewMinionsService instead
func NewMinionsServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MinionsServiceClient {
  return &MinionsServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewMinionsService instead
func NewMinionsServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MinionsServiceClient {
  return &MinionsServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewMinionsServiceClient(c thrift.TClient) *MinionsServiceClient {
  return &MinionsServiceClient{
    c: c,
  }
}

// Parameters:
//  - Food
func (p *MinionsServiceClient) Eat(ctx context.Context, food string) (r *EatResponse, err error) {
  var _args53 MinionsServiceEatArgs
  _args53.Food = food
  var _result54 MinionsServiceEatResult
  if err = p.c.Call(ctx, "Eat", &_args53, &_result54); err != nil {
    return
  }
  return _result54.GetSuccess(), nil
}

type MinionsServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler MinionsService
}

func (p *MinionsServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *MinionsServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *MinionsServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewMinionsServiceProcessor(handler MinionsService) *MinionsServiceProcessor {

  self55 := &MinionsServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self55.processorMap["Eat"] = &minionsServiceProcessorEat{handler:handler}
return self55
}

func (p *MinionsServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x56 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x56.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x56

}

type minionsServiceProcessorEat struct {
  handler MinionsService
}

func (p *minionsServiceProcessorEat) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MinionsServiceEatArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("Eat", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MinionsServiceEatResult{}
var retval *EatResponse
  var err2 error
  if retval, err2 = p.handler.Eat(ctx, args.Food); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Eat: " + err2.Error())
    oprot.WriteMessageBegin("Eat", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("Eat", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Food
type MinionsServiceEatArgs struct {
  Food string `thrift:"food,1" db:"food" json:"food"`
}

func NewMinionsServiceEatArgs() *MinionsServiceEatArgs {
  return &MinionsServiceEatArgs{}
}


func (p *MinionsServiceEatArgs) GetFood() string {
  return p.Food
}
func (p *MinionsServiceEatArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MinionsServiceEatArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Food = v
}
  return nil
}

func (p *MinionsServiceEatArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Eat_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MinionsServiceEatArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("food", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:food: ", p), err) }
  if err := oprot.WriteString(string(p.Food)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.food (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:food: ", p), err) }
  return err
}

func (p *MinionsServiceEatArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MinionsServiceEatArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MinionsServiceEatResult struct {
  Success *EatResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMinionsServiceEatResult() *MinionsServiceEatResult {
  return &MinionsServiceEatResult{}
}

var MinionsServiceEatResult_Success_DEFAULT *EatResponse
func (p *MinionsServiceEatResult) GetSuccess() *EatResponse {
  if !p.IsSetSuccess() {
    return MinionsServiceEatResult_Success_DEFAULT
  }
return p.Success
}
func (p *MinionsServiceEatResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MinionsServiceEatResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MinionsServiceEatResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &EatResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MinionsServiceEatResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Eat_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MinionsServiceEatResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MinionsServiceEatResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MinionsServiceEatResult(%+v)", *p)
}


